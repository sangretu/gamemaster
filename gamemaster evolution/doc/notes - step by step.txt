[20200107]

Transcribed while driving home:

During this week off, I want to make progress on getting master in a new way. Specifically, to iterate from the simplest scenario I can come up with and see where it develops with tiny steps. 

 [X] step one. A goblin fight. Goblin has four hit points, player has 10 hit points. Both need to roll a 10 on a 20 sided die to hit the other.  A successful hit does one damage.  output is sent to the consul, with the text “you hit the goblin“, you miss the goblin“, “the goblin hits you“, or “the goblin misses you“.  once one of the fighters is reduced to zero points, the other fighter is announced as the winner.  The player attacks first. 

 [X] step two. Add round markers. Between each set of attacks, a divider line is shown along with the current round number. Final read out has the number of rounds append it, for example, “the goblin one in three rounds. 

 [X] step three.  allow the player to select an action for each round. The two actions the player may select “attack“ and “flea”. The player receives a simple prompt  on the consul, and inputs their selected option as a function call in the consul.  if the player fleas, the battle ends prematurely with the final output, “flat“.  amendment: “you flag after X rounds of combat“. 

 [X] step four.  convert actions to buttons. Add an attack and flee button to the page, which perform the same action as the function calls. 

 [X] step five.  randomize points. The player receives a random number of her points from 1 to 10, the goblin receives a random number of his points from 1 to 4. 

 [X] step six.  status updates. At the beginning of each round, the player and the goblins current and maximum points are displayed. 

 [X] step seven.  variable weapon damage. The player does a random amount of damage from 1 to 6 points each time they hit. The goblin does a random amount of damage from 1 to 4 points each time it hits. The amount of damage done each time is added to the readout, for example, “you hit the goblin for two points of damage.“
 
 (Note : At this point in development, I observe the code is a bug-ridden clusterfuck, as I expected, due to the complete lack of design or organization and the naive approach this experiment is intended to demonstrate. It is, however, undeniable that I have made far more progress than I normally would in the time spent. The assumed cost will be paid later, when I am eventually forced to pay the engineering debt for kicking the can down the road. The real test will be determining if sum total cost balances out.)

 [X] step eight.  armor class. The player has an armor class of six. The goblin has an armor class of eight.  rather than having to roll a 10 on a 20 sided die to hit the opponent, each fighter must roll  A value equal to or greater than 20 minus their opponents armor class. 

 [X] step nine.  character classes.  The player is randomly assigned one of the standard set of character classes when the program begins.  each class, of the set listed in the players handbook to include the monk but not the Bard, has a different maximum hit die and a different armor class based on class armor restrictions.   when the player is assigned a class, before the battle begins, a line of output indicates what class they have been assigned, and what their head points armor class are.  One that was an accident   sorry, I just witnessed a traffic accident. Back to work. Each class also has a custom weapon damage range based on their weapon limitations. The standard stats provided earlier should be used for the fighter class unless it throws things out of balance. 

 [X] step 10.   refine hit odds. Assign the goblin an appropriate armor class from the monster manual. Assign minimum to hit values based on character class. Similarly for the goblin.  these should be static for now, but annotate the code to indicate the assumption of fighting this specific opponent. 

 [X] step 11.  how to put dye rolls. With variable minimum hit requirements, it is necessary to understand what roles were made in order to determine if the calculations are correct.  include the results of each die roll with the output indicating a hit or miss. 

 [X] step 12.  specific weapons.  when character class is selected, randomly assign one of the set of allowed weapons for that character class and indicate the result in the output.   apply the appropriate damage range based on this specific opponent, to include its size and armor for that specific. Annotate as indicated previously.  make appropriate adjustments to the hit role as indicated in the weapon the type versus armor type table.  include this information in the class selection section. 

 [X] step 13.  add round zero to indicate the beginning of combat. Move data pertinent to the specific set of fighters into this section. 

 [X] step 14.  include target role information. When a roll to hit is made, include not only the result of the role, but the target value as well. 

 [ ] step 15.  status button. Add a third button to the interface which displays the current state of the battle and the fighters. 

 [ ] step 16.  add a cobalt. Randomly determine which of the two monster types is the players opponent at the beginning of the battle. Make the necessary adjustments to target values and modifiers. 

 [ ]  step 17. Or comments. Multiple contacts.  at the end of each battle, give the player an option as to whether or not they wish to fight another battle. If they choose to do so, they begin the battle with their current equipment and hit points, and their opponent is chosen at random. Note that this may alter the nature of the battle and the target values. 

 [ ] step 18.   scoring. Grant one score point to the player home they win a battle. When a player chooses not to enter another battle, indicate their current score.  if a player fails or loses a battle, display the score they would have gotten. The option of whether or not to fight an additional battle  is selected by pressing one of two new buttons in the UI. 

 [ ] step 19.  automated testing.  add two buttons to the user interface to start and stop automated testing.  while testing is taking place, the program will play as if a player was repeatedly choosing to start new games and always continue to additional battles.  each time a new character is created, the program will assign a number to that character, and each time a set of battles is completed, including  any set which may be active when automated testing is stopped, the character number, relevant metadata, score, and whether or not they lived, is recorded. When automated testing is stopped, a report is sent to the consul with this data. 

 [ ] step 20. Fighting multiple enemies.  each battle, the player fights against a random number of the indicated opponent as reflected in the monster manual entry for that creature type.  each monster in the group is created separately, with its own maximum hip points. Each round, each monster attacks the player. When the player attacks, they attack the first living monster in the list.  note that this affects battle information and end of round output, along with requiring differentiation between monsters in output to indicate which ones were hit or are acting. 

 [ ] step 21. Multiple characters.  add a set of radio buttons to the user interface interface to allow the player to select a number of party members from 1 to 4.  this means the player now represents a party and not just a single character, the output from various scenarios including automated testing, which should select a number of characters as indicated by the current option, must alter their output accordingly.  A battle continues as long as at least one member of each opposing side remains alive. 

 [ ] step 22. Experience points. Rather than simply giving a point for each battle one,  surviving characters are granted a number of experience points as in the monster manual entry.  for now, each surviving character receives the full amount of experience points for each monster slain.  end of career output and automated testing output now need to separate party members and indicate the number of score points and experience points granted to each one. 

 [ ] step 23.  Random monster table. Add all of the level one random encounter monsters from the basic random generation table to the set of possible encounters. 

 [ ] step 24.  take a break, consider the current state of the program, and dictate new steps. 